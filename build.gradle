buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.10.RELEASE")
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'spring-boot'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

repositories {
    mavenCentral()
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    ignoreFailures = true
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

sourceCompatibility=1.8
targetCompatibility=1.8
version = '0.1'
compileJava.options.encoding = 'UTF-8'


eclipse {
	jdt.file.withProperties { properties ->
	  properties.put('org.eclipse.jdt.core.formatter.lineSplit', '200')
	  properties.put('org.eclipse.jdt.core.formatter.tabulation.char', 'space')
	}
}

tasks.eclipse.doLast {
    def props = new Properties()
    props.setProperty('eclipse.preferences.version', '1')
    props.setProperty('org.moreunit.preferences.version', '2')
    props.setProperty('org.moreunit.unitsourcefolder', "${project.name}:src/main/java:${project.name}:src/test/java")
    props.setProperty('org.moreunit.useprojectsettings', 'true')
    file(".settings/org.moreunit.prefs").withOutputStream {
        stream -> props.store(stream, null)
    }
}

dependencies {

    compile group: 'com.google.guava', name: 'guava', version: '18.0'

    //databases
    compile group: 'com.h2database', name: 'h2', version: '1.3.176'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.34'
    
    compile group: 'org.springframework.plugin', name: 'spring-plugin-core', version: '1.1.0.RELEASE'
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas', version: '0.16.0.RELEASE'

    compile group: 'com.fasterxml.jackson.jaxrs', name:'jackson-jaxrs-json-provider', version: '2.0.1'
    compile group: 'com.fasterxml.jackson.jaxrs', name:'jackson-jaxrs-base', version: '2.5.0'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '1.2.1.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '1.2.1.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jersey', version: '1.2.1.RELEASE'
    compile("org.springframework.boot:spring-boot-starter-web") {
    //    exclude module: "spring-boot-starter-tomcat"
    }
    //compile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty'

    compile group: 'net.sf.dozer', name: 'dozer', version: '5.5.1'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.2.1.RELEASE'
    testCompile group: 'org.easytesting', name: 'fest-assert', version: '1.4'
}

//start server from command line
mainClassName = 'org.dicadeveloper.weplantaforest.Application'
run {
    args 'arg1', 'arg2'
}

test {
    maxParallelForks Runtime.getRuntime().availableProcessors()
    testLogging {
        // Show that tests are run in the command-line output
        events 'passed'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

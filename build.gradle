apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

repositories {
    mavenCentral()
}

sourceCompatibility=1.8
targetCompatibility=1.8
version = '0.1'
compileJava.options.encoding = 'UTF-8'


eclipse {
	jdt.file.withProperties { properties ->
	  properties.put('org.eclipse.jdt.core.formatter.lineSplit', '200')
	  properties.put('org.eclipse.jdt.core.formatter.tabulation.char', 'space')
	}
}

tasks.eclipse.doLast {
    def props = new Properties()
    props.setProperty('eclipse.preferences.version', '1')
    props.setProperty('org.moreunit.preferences.version', '2')
    props.setProperty('org.moreunit.unitsourcefolder', "${project.name}:src/main/java:${project.name}:src/test/java")
    props.setProperty('org.moreunit.useprojectsettings', 'true')
    file(".settings/org.moreunit.prefs").withOutputStream {
        stream -> props.store(stream, null)
    }
}

dependencies {
    
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    
    //databases
    compile group: 'com.h2database', name: 'h2', version: '1.3.172'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.27'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
}

//start server from command line
mainClassName = 'org.dicadeveloper.weplantaforest.ExampleMain'
run {
    args 'arg1', 'arg2'
}

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'passed'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

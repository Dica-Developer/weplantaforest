buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

plugins {
    id 'org.hidetake.ssh' version '1.1.3'
}

println "                            # #### ####"
println "                          ### \\/#|### |/####"
println "                         ##\\/#/ \\||/##/_/##/_#"
println "                       ###  \\/###|/ \\/ # ###"
println "                     ##_\\_#\\_\\## | #/###_/_####"
println "                    ## #### # \\ #| /  #### ##/##"
println "                     __#_--###`  |{,###---###-~"
println "                               \\ }{"
println "                                }}{"
println "                                }}{"
println "                           ejm  {{}"
println "                          , -=-~{ .-^- _"
println "                                `}"
println "                                 {"
println "88     88\"\"Yb 88        db    88b 88 888888        db        888888 88\"\"Yb 888888 888888"
println "88     88__dP 88       dPYb   88Yb88   88         dPYb         88   88__dP 88__   88__"
println "88     88\"\"\"  88  .o  dP__Yb  88 Y88   88        dP__Yb        88   88\"Yb  88\"\"   88\"\""
println "88     88     88ood8 dP\"\"\"\"Yb 88  Y8   88       dP\"\"\"\"Yb       88   88  Yb 888888 888888"

println "Available processors: " + Runtime.getRuntime().availableProcessors()
try {
  print "npm version: " + ("npm --version".execute().text)
  print "node version: " + ("node --version".execute().text)
} catch (Exception e) {
  println("Didn't find npm and/or node to determine the used versions.")
}
print "java version: " + System.getProperty("java.version")
println ""

apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'project-report'

repositories {
    mavenCentral()
    maven {
        url "http://repo.spring.io/milestone"
    }
}

remotes {
    ipatHost {
        host = 'iplantatree.org'
        user = 'ipat'
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

version = '0.1'
compileJava.options.encoding = 'UTF-8'

eclipse {
	jdt.file.withProperties { properties ->
	  properties.put('org.eclipse.jdt.core.formatter.lineSplit', '200')
	  properties.put('org.eclipse.jdt.core.formatter.tabulation.char', 'space')
	}
}

test {
    testLogging {
        events 'passed'
    }
    if(project.hasProperty('mysql')) {
        println "Running tests on mysql db!"
        systemProperty "spring.profiles.active", "test,mysql-test"
    } else {
        def maxForks = Runtime.getRuntime().availableProcessors()
        if (System.env.'CI') {
            maxForks = (Math.min(((int) (Runtime.getRuntime().availableProcessors() / 2)), 2))
        }
        println "Maximum used parallel forks: " + maxForks
        maxParallelForks maxForks
    }
}


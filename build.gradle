buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.10.RELEASE")
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
        classpath 'org.kordamp.gradle:livereload-gradle-plugin:0.2.1'
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

plugins {
    id 'org.hidetake.ssh' version '1.1.3'
}

println "                            # #### ####"
println "                          ### \\/#|### |/####"
println "                         ##\\/#/ \\||/##/_/##/_#"
println "                       ###  \\/###|/ \\/ # ###"
println "                     ##_\\_#\\_\\## | #/###_/_####"
println "                    ## #### # \\ #| /  #### ##/##"
println "                     __#_--###`  |{,###---###-~"
println "                               \\ }{"
println "                                }}{"
println "                                }}{"
println "                           ejm  {{}"
println "                          , -=-~{ .-^- _"
println "                                `}"
println "                                 {"
println "88     88\"\"Yb 88        db    88b 88 888888        db        888888 88\"\"Yb 888888 888888"
println "88     88__dP 88       dPYb   88Yb88   88         dPYb         88   88__dP 88__   88__"
println "88     88\"\"\"  88  .o  dP__Yb  88 Y88   88        dP__Yb        88   88\"Yb  88\"\"   88\"\""
println "88     88     88ood8 dP\"\"\"\"Yb 88  Y8   88       dP\"\"\"\"Yb       88   88  Yb 888888 888888"

println "Available processors: " + Runtime.getRuntime().availableProcessors()
try {
  print "npm version: " + ("npm --version".execute().text)
  print "node version: " + ("node --version".execute().text)
} catch (Exception e) {
  println("Didn't find npm and/or node to determine the used versions.")
}
print "java version: " + System.getProperty("java.version")
println ""

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'spring-boot'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.kordamp.gradle.livereload'
apply plugin: 'org.hidetake.ssh'

repositories {
    mavenCentral()
    maven {
        url "http://repo.spring.io/milestone"
    }
}

remotes {
    ipatHost {
        host = 'iplantatree.org'
        user = 'ipat'
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    ignoreFailures = false
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

sourceCompatibility=1.8
targetCompatibility=1.8
version = '0.1'
compileJava.options.encoding = 'UTF-8'


eclipse {
	jdt.file.withProperties { properties ->
	  properties.put('org.eclipse.jdt.core.formatter.lineSplit', '200')
	  properties.put('org.eclipse.jdt.core.formatter.tabulation.char', 'space')
	}
}

tasks.eclipse.doLast {
    def props = new Properties()
    props.setProperty('eclipse.preferences.version', '1')
    props.setProperty('org.moreunit.preferences.version', '2')
    props.setProperty('org.moreunit.unitsourcefolder', "${project.name}:src/main/java:${project.name}:src/test/java")
    props.setProperty('org.moreunit.useprojectsettings', 'true')
    file(".settings/org.moreunit.prefs").withOutputStream {
        stream -> props.store(stream, null)
    }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {

    compile group: 'com.google.guava', name: 'guava', version: '18.0'

    //databases
    compile group: 'com.h2database', name: 'h2', version: '1.4.186'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.34'

    compile group: 'org.flywaydb', name: 'flyway-core', version: '3.1'

    def springBootVersion = '1.3.0.M5'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jersey', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty', version: springBootVersion

    compile group: 'net.sf.dozer', name: 'dozer', version: '5.5.1'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.7.1'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
    testCompile group: 'org.easytesting', name: 'fest-assert', version: '1.4'
    testCompile group: 'com.jayway.restassured', name: 'rest-assured', version: '2.4.1'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
}

//start server from command line
mainClassName = 'org.dicadeveloper.weplantaforest.Application'
run {
    args 'arg1', 'arg2'
}

test {
    testLogging {
        events 'passed'
    }
    if(project.hasProperty('mysql')) {
        println "Running tests on mysql db!"
        systemProperty "spring.profiles.active", "test,mysql-test"
    } else {
        def maxForks = Runtime.getRuntime().availableProcessors()
        if (System.env.'CI') {
            maxForks = (Math.min(((int) (Runtime.getRuntime().availableProcessors() / 2)), 2))
        }
        println "Maximum used parallel forks: " + maxForks
        maxParallelForks maxForks
    }
}

task testUi << {
    def process = "grunt test".execute(null, new File("src/main/webapp"))
    process.text.eachLine {
        println it
    }
    if (0 != process.exitValue()) {
        throw new org.gradle.tooling.BuildActionFailureException("grunt test in webapp failed with " + process.exitValue(), null)
    }
}

task testAll << {
}
testAll.dependsOn testUi, test

task setupUiDev << {
    def process = "npm install -g yo grunt-cli bower".execute()
    process.text.eachLine {
        println it
    }
    if (0 != process.exitValue()) {
        throw new org.gradle.tooling.BuildActionFailureException("npm install in root failed with " + process.exitValue(), null)
    }
    process = "npm install".execute(null, new File("src/main/webapp"))
    process.text.eachLine {
        println it
    }
    if (0 != process.exitValue()) {
        throw new org.gradle.tooling.BuildActionFailureException("npm install in webapp failed with " + process.exitValue(), null)
    }
    process = "bower install".execute(null, new File("src/main/webapp"))
    process.text.eachLine {
        println it
    }
    if (0 != process.exitValue()) {
        throw new org.gradle.tooling.BuildActionFailureException("bower install in webapp failed with " + process.exitValue(), null)
    }
}

task buildUi << {
    def process = "grunt build".execute(null, new File("src/main/webapp"))
    process.text.eachLine {
        println it
    }
    if (0 != process.exitValue()) {
        throw new org.gradle.tooling.BuildActionFailureException("grunt build failed with " + process.exitValue(), null)
    }
}
build.dependsOn buildUi

buildUi.dependsOn setupUiDev

task watchUiDev << {
    "grunt dev".execute(null, new File("src/main/webapp"))
}
bootRun.dependsOn watchUiDev

liveReload {
    docRoot='src/main/webapp/client'
}

task deploy(dependsOn: [clean, buildUi, distTar]) << {
    ssh.run {
        session(remotes.ipatHost) {
            String distName = "${project.name}-${version}"
            String distTar = "${distName}.tar"
            File distributionFile = file("build/distributions/${distTar}")
            assert distributionFile.exists(), "File $distributionFile"

            println "Uploading distribution (${distributionFile.length()/1024/1024} MB) ..."
            put(distributionFile,"./")

            println "Stopping old application..."
            execute "/etc/init.d/wpaf-staging stop"
            
            println "Backing up old project to weplantaforest-staging.backup..."
            execute "rm -rf weplantaforest-staging.backup"
            execute "if [ -d weplantaforest-staging ]; then mv weplantaforest-staging weplantaforest-staging.backup; fi"

            println "Unpacking distribution to weplantaforest-staging"
            execute "mkdir weplantaforest-staging"
            execute "tar --strip-components=1 -C weplantaforest-staging -xvf ${distTar}"

            println "Starting Application..."
            execute "/etc/init.d/wpaf-staging start"
            
            println "Watch log under weplantaforest-staging/console.log"
        }
    }
}

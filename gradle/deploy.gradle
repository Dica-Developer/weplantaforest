// TODO add start/stop/backup-mysql to deploy ?
// use the correct app profile  

def userHome = System.getProperty('user.home')

def ipatPrivateSshKeyFile = file(ext.properties.get("ipat.sshPrivateKeyFile", userHome + '/.ssh/id_rsa'))
def ipatPrivateKeyPassword = ext.properties.get("ipat.sshPrivateKeyPassword")
def ipatUser = ext.properties.get("ipat.user")
def ipatHost = ext.properties.get("ipat.host")
def installationDir = "/home/${ipatUser}/weplantaforest"

ssh.settings {
  retryCount = 0
  logging = 'slf4j'
  dryRun = false
  jschLog = true
  timeoutSec = 30
}

remotes {
  server {
    host = ipatHost
    user = ipatUser
    identity = ipatPrivateSshKeyFile
    passphrase = ipatPrivateKeyPassword
  }
}

task npmInstall(type: Exec) {
  group 'Deployment'

  inputs.file project(':').file('ui/package.json')
  outputs.dir project(':').file('ui/node_modules')

  workingDir project(':').file('ui')
  commandLine 'npm', 'install'
}

task buildUi(type: Exec) {
  group 'Deployment'

  dependsOn npmInstall

  inputs.dir project(':').file('ui/src')
  outputs.dir project(':').file('ui/dist/js')
  outputs.dir project(':').file('ui/dist/index.html')

  workingDir project(':').file('ui')
  commandLine 'npm', 'run', 'build'
}

task deployUi {
  description 'Deploys the project to a remote server'
  group 'Deployment'

  dependsOn buildUi

  doLast {
    assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
    logger.info "Connect as ${ipatUser} (${ipatPrivateSshKeyFile}) to ${ipatHost}"

    ssh.run {
      session(remotes.server) {
        def projectDir = "${installationDir}/ui"
        def webserverHome = "/var/www/wpaf"
        def projectBackupDir = "${installationDir}/ui.backup"

        logger.info "Creating project dir..."
        execute "mkdir -p ${projectDir}"

        logger.info "Removing old backup..."
        remove projectBackupDir

        logger.info "Backing up existing deployment..."
        execute "cp -r ${projectDir} ${projectBackupDir}"

        put from: project(':').file('ui/dist'), into: "${projectDir}"
      }
    }
  }
}

configure([project(':article-manager'), project(':user')]) {

  task prepareServiceScripts(description: 'Creates a init.d script from a template for a specific project.') << {
    assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
    def initdTemplate = rootProject.file('gradle/deploy/initd.template.sh')
    assert initdTemplate.exists(), "The file ${initdTemplate} does not exist!"

    copy {
      from initdTemplate
      into "${project.buildDir}/init.d/"
      rename { String fileName ->
        fileName.replace(initdTemplate.name, project.name)
      }
      filter{ 
        it
          .replaceAll('@@projectName@@', project.name)
          .replaceAll('@@user@@', ipatUser)
          .replaceAll('@@installationDir@@', installationDir)
      }
    }
  }

  task syncServiceScript(description:'Syncs the init.d script for operating the installed weplantaforest modules on a remote server', dependsOn: 'prepareServiceScripts') << {
    assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
    ssh.run {
      session(remotes.server) {
        def initdScript = file("build/init.d/${project.name}")
        assert initdScript.exists()

        logger.info "Uploading $initdScript to ${remotes.server}:/tmp/init.d/"
        execute 'mkdir -p /tmp/init.d'
        put from: initdScript, into: "/tmp/init.d/${project.name}"

        logger.info 'Diff with existing file'
        try {
          execute "diff /tmp/init.d/${initdScript.name} /etc/init.d/${initdScript.name}"
        } catch (Exception e) {
          def message = """\
            |Service script for module '${project.name}' not up-to-date!
            |Please copy it from '/tmp/init.d/${initdScript.name}' (as root user)
            |su - root -c \"cp /tmp/init.d/${project.name} /etc/init.d/; chmod 755 /etc/init.d/${project.name}"
            """.stripMargin()
            throw new IllegalStateException(message)
        }
        logger.info "Service script for module '${project.name}' already up to date!"
      }
    }
  }

  task deploy (description:'Deploys the project to a remote server', dependsOn:'installDist') << {
    assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
    ssh.run {
      session(remotes.server) {
        def projectDir = "${installationDir}/${project.name}"
        def projectBackup = "${installationDir}/${project.name}.backup"

        execute "mkdir -p ${projectDir}"

        logger.info "Removing old backup..."
        execute "rm -rf ${projectBackup}"

        logger.info "Backing up existing deployment..."
        execute "cp -r ${projectDir} ${projectBackup}"

        rsync("$buildDir/install/${project.name}/", "${ipatUser}@${ipatHost}:${projectDir}/")
      }
    }
  }
}

def rsync(String from, String to) {
  logger.lifecycle "RSync from $from to $to"
  exec {
    executable "rsync"
    args '-vr', '--progress', '--delete', from, to
  }
}


// TODO add start/stop/backup-mysql to deploy ?
// use the correct app profile  

def userHome = System.getProperty('user.home')

def ipatPrivateSshKeyFile = file(ext.properties.get("ipat.sshPrivateKeyFile", userHome + '/.ssh/id_rsa'))
def ipatPrivateKeyPassword = ext.properties.get("ipat.sshPrivateKeyPassword")
def ipatUser = ext.properties.get("ipat.user")
def ipatHost = ext.properties.get("ipat.host")
def installationDir = "/home/${ipatUser}/weplantaforest"
def installationDirProduction = "/home/${ipatUser}/iplantatree"

import org.apache.tools.ant.filters.*;

ssh.settings {
  retryCount = 0
  logging = 'slf4j'
  dryRun = false
  jschLog = true
  timeoutSec = 30
}

remotes {
  server {
    host = ipatHost
    user = ipatUser
    identity = ipatPrivateSshKeyFile
    passphrase = ipatPrivateKeyPassword
  }
}

task npmInstall(type: Exec) {
  group 'Deployment'

  inputs.file project(':').file('ui/package.json')
  outputs.dir project(':').file('ui/node_modules')

  workingDir project(':').file('ui')
  commandLine npmCommand, 'install'
}

task cleanBuildUi() {
  group 'Deployment'

  doLast {
    project(':').file('ui/dist/js').deleteDir()
    project(':').file('ui/dist/index.html').delete()
  }
}

task buildUi(type: Exec) {
  group 'Deployment'
  
  dependsOn npmInstall
  
  inputs.dir project(':').file('ui/node_modules')
  inputs.dir project(':').file('ui/src')

  outputs.dir project(':').file('ui/dist/js')
  outputs.file project(':').file('ui/dist/index.html')

  workingDir project(':').file('ui')
  
  commandLine npmCommand, 'run', 'build'
  
  doLast {
    replaceUrls('http://localhost:8080', 'http://iplantatree.org:81') 
    replaceUrls('http://localhost:8081', 'http://iplantatree.org:81/s/u')
    replaceUrls('http://localhost:8082', 'http://iplantatree.org:81/s/m')
    replaceUrls('http://localhost:8083', 'http://iplantatree.org:81/s/a')
  }
}

task buildUiProduction(type: Exec) {
  group 'Deployment'

  dependsOn npmInstall

  inputs.dir project(':').file('ui/node_modules')
  inputs.dir project(':').file('ui/src')

  outputs.dir project(':').file('ui/dist/js')
  outputs.file project(':').file('ui/dist/index.html')

  workingDir project(':').file('ui')

  commandLine npmCommand, 'run', 'build'

  doLast {
    replaceUrls('http://localhost:8080', 'https://iplantatree.org')
    replaceUrls('http://localhost:8081', 'https://iplantatree.org/p/u')
    replaceUrls('http://localhost:8082', 'https://iplantatree.org/p/m')
    replaceUrls('http://localhost:8083', 'https://iplantatree.org/p/a')
  }
}

def replaceUrls(toReplace, replaceWith){
  logger.info 'replace urls in every file in ui/dist/js from ' + toReplace + ' to ' + replaceWith
  project(':').file('ui/dist/js').eachFileRecurse {File file ->
    if (!file.isDirectory()){
      def updatedContent = file.getText('UTF-8').replaceAll(toReplace){replaceWith}
      file.write(updatedContent, 'UTF-8')
    }
  }
}

task deployUi {
  description 'Deploys the project to a remote server'
  group 'Deployment'

  dependsOn cleanBuildUi
  dependsOn buildUi
  buildUi.mustRunAfter cleanBuildUi

  doLast {
    assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
    logger.info "Connect as ${ipatUser} (${ipatPrivateSshKeyFile}) to ${ipatHost}"

    ssh.run {
      session(remotes.server) {
        def projectDir = "${installationDir}/ui"
        def projectBackup = "${installationDir}/ui.backup"

        logger.info "Creating project dir (for the first deployment (the 0.01% case :-))..."
        execute "mkdir -p ${projectDir}"

        logger.info "Backing up existing deployment..."
        execute "cp -r ${projectDir}/dist/ ${projectBackup}"

        logger.lifecycle "put project from $buildDir/install/${project.name} to ${projectDir}"
        rsync("ui/dist/", "${ipatUser}@${ipatHost}:${projectDir}/dist/")

        logger.lifecycle "chown on directory ${projectDir}/dist"
        execute "chmod -R ugo+r ${projectDir}/dist/"
      }
    }
  }
}

task deployUiProduction {
  description 'Deploys the project to a remote server'
  group 'Deployment'

  dependsOn cleanBuildUi
  dependsOn buildUiProduction
  buildUiProduction.mustRunAfter cleanBuildUi

  doLast {
    assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
    logger.info "Connect as ${ipatUser} (${ipatPrivateSshKeyFile}) to ${ipatHost}"

    ssh.run {
      session(remotes.server) {
        def projectDir = "${installationDirProduction}/ui"
        def projectBackup = "${installationDirProduction}/ui.backup"

        logger.info "Creating project dir (for the first deployment (the 0.01% case :-))..."
        execute "mkdir -p ${projectDir}"
        execute "mkdir -p ${projectDir}/dist"

        logger.info "Backing up existing deployment..."
        execute "cp -r ${projectDir}/dist/ ${projectBackup}"

        logger.lifecycle "put project from $buildDir/install/${project.name} to ${projectDir}"
        rsync("ui/dist/", "${ipatUser}@${ipatHost}:${projectDir}/dist/")

        logger.lifecycle "chown on directory ${projectDir}/dist"
        execute "chmod -R ugo+r ${projectDir}/dist/"
      }
    }
  }
}

configure([project(':article-manager'), project(':user'), project(':admin')]) {

  task prepareServiceScripts(description: 'Creates a init.d script from a template for a specific project.') {
    doLast {
      assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
      def initdTemplate = rootProject.file('gradle/deploy/initd.template.sh')
      assert initdTemplate.exists(), "The file ${initdTemplate} does not exist!"

      copy {
        from initdTemplate
          into "${project.buildDir}/init.d/"
          rename { String fileName ->
            fileName.replace(initdTemplate.name, project.name)
          }
        filter{ 
          it
            .replaceAll('@@projectName@@', project.name)
            .replaceAll('@@user@@', ipatUser)
            .replaceAll('@@installationDir@@', installationDir)
        }
        filter(FixCrLfFilter.class,
          eol:FixCrLfFilter.CrLf.newInstance("lf"))
      }
    }
  }

  task syncServiceScript(description:'Syncs the init.d script for operating the installed weplantaforest modules on a remote server', dependsOn: 'prepareServiceScripts') {
    doLast {
      assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
      ssh.run {
        session(remotes.server) {
          def initdScript = file("build/init.d/${project.name}")
            assert initdScript.exists()

            logger.info "Uploading $initdScript to ${remotes.server}:/tmp/init.d/"
            execute 'mkdir -p /tmp/init.d'
            put from: initdScript, into: "/tmp/init.d/${project.name}"

            logger.info 'Diff with existing file'
            try {
              execute "diff /tmp/init.d/${initdScript.name} /etc/init.d/${initdScript.name}"
            } catch (Exception e) {
              def message = """\
                             |Service script for module '${project.name}' not up-to-date!
                             |Please copy it from '/tmp/init.d/${initdScript.name}' (as root user)
                             |su - root -c \"cp /tmp/init.d/${project.name} /etc/init.d/; chmod 755 /etc/init.d/${project.name}"
                             """.stripMargin()
                             throw new IllegalStateException(message)
            }
          logger.info "Service script for module '${project.name}' already up to date!"
        }
      }
    }
  }

  task deploy (description:'Deploys the project to a remote server', dependsOn:'installDist') {
    doLast {
      assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
      ssh.run {
        session(remotes.server) {
          def projectDir = "${installationDir}/${project.name}"
          def projectBackup = "${installationDir}/${project.name}.backup"

          execute "mkdir -p ${projectDir}"

          logger.info "Removing old backup..."
          execute "rm -rf ${projectBackup}"

          logger.lifecycle "Backing up existing deployment..."
          execute "cp -r ${projectDir} ${projectBackup}"

          logger.lifecycle "put project from $buildDir/install/${project.name} to ${projectDir}"
          rsync("${project.name}/build/install/${project.name}/bin/", "${ipatUser}@${ipatHost}:${projectDir}/bin/")
          rsync("${project.name}/build/install/${project.name}/lib/", "${ipatUser}@${ipatHost}:${projectDir}/lib/")
        }
      }
    }
  }

  task deployProduction (description:'Deploys the project to a remote server', dependsOn:'installDist') {
    doLast {
      assert ipatUser!=null && ipatHost!=null && ipatPrivateSshKeyFile.exists(), "Please configure 'ipat.user', 'ipat.host' & 'ipat.sshPrivateKeyFile' in your ${userHome}/.gradle/gradle.properties!"
      ssh.run {
        session(remotes.server) {
          def projectDir = "${installationDirProduction}/${project.name}"
          def projectBackup = "${installationDirProduction}/${project.name}.backup"

          execute "mkdir -p ${projectDir}"

          logger.info "Removing old backup..."
          execute "rm -rf ${projectBackup}"

          logger.lifecycle "Backing up existing deployment..."
          execute "cp -r ${projectDir} ${projectBackup}"

          logger.lifecycle "put project from $buildDir/install/${project.name} to ${projectDir}"
          rsync("${project.name}/build/install/${project.name}/bin/", "${ipatUser}@${ipatHost}:${projectDir}/bin/")
          rsync("${project.name}/build/install/${project.name}/lib/", "${ipatUser}@${ipatHost}:${projectDir}/lib/")
        }
      }
    }
  }
}

def rsync(String from, String to) {
  logger.lifecycle "RSync from $from to $to"
  exec {
    executable "rsync"
    args '-vr', '--progress', '--delete', from, to
  }
}


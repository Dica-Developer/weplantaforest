subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'

  sourceCompatibility = '1.11'
  targetCompatibility = '1.11'
  compileJava.options.encoding = 'UTF-8'

  repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }

  configurations.all {
    resolutionStrategy {
      failOnVersionConflict()
      force 'org.slf4j:slf4j-api:1.7.25'
      force 'org.checkerframework:checker-qual:2.10.0'
      force 'com.google.errorprone:error_prone_annotations:2.3.3'
      force 'net.bytebuddy:byte-buddy:1.9.11'
      force 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
      force 'org.junit.jupiter:junit-jupiter-api:5.5.2'
      force 'commons-codec:commons-codec:1.13'
      force 'org.assertj:assertj-core:3.14.0'
    }
  }

  archivesBaseName = path[1..-1].replaceAll(':', '-').toLowerCase()

  eclipse {
    jdt.file.withProperties { properties ->
      properties.put('org.eclipse.jdt.core.formatter.lineSplit', '200')
      properties.put('org.eclipse.jdt.core.formatter.tabulation.char', 'space')
    }
  }

  test {
    testLogging {
      events 'passed'
    }
    if (project.hasProperty('mysql')) {
      logger.info "Running tests on mysql db!"
      systemProperty "spring.profiles.active", "test,mysql-test"
    }

    def maxForks = Runtime.getRuntime().availableProcessors()
    logger.lifecycle "Maximum used parallel forks for " + project + ": " + maxForks
    maxParallelForks maxForks

    if (System.env.'CI') {
      jacoco {
        enabled true
      }
    } else {
      jacoco {
        enabled false
      }
    }
  }

  configurations {
    testArtifacts
  }

  tasks.withType(Test) {
    rootProject.testReport.reportOn it
    it.dependsOn('jar')

    // ensure tasks don't overwrite the default report directories used by the 'test' task
    reports.html.destination = file("${buildDir}/reports/${name}")
    reports.junitXml.destination = file("${buildDir}/reports/${name}/results")
    binResultsDir = file("${buildDir}/reports/${name}/results/binary/${name}")
  }

  task testJar(type: Jar, group: 'Build') {
    description = 'Assembles a jar archive containing the test classes.'
    baseName = "${archivesBaseName}-test"
    from sourceSets.test.output
  }

  artifacts {
    testArtifacts testJar
  }

  jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
  }
}
